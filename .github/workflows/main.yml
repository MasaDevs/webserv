name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  clang-tools:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache Clang Tools
      uses: actions/cache@v2
      with:
        path: /usr/bin/clang-tidy
        key: clang-tidy-${{ runner.os }}

    - name: Install Clang Tools
      if: steps.cache.outputs.cache-hit != 'true'
      run: sudo apt-get install clang-tidy

    - name: Run clang-tidy
      run: |
        find ./srcs -name '*.cpp' -or -name '*.hpp' | while read file; do
            clang-tidy $file -- -Wall -Wextra -Werror -std=c++98
        done

  cppcheck-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache cppcheck
      uses: actions/cache@v2
      with:
        path: /usr/bin/cppcheck
        key: cppcheck-${{ runner.os }}

    - name: Install cppcheck
      if: steps.cache.outputs.cache-hit != 'true'
      run: sudo apt-get install cppcheck

    - name: Run cppcheck
      run: cppcheck --enable=all --error-exitcode=1 --inconclusive --force  --suppress=unusedFunction --suppress=unmatchedSuppression --suppress=missingIncludeSystem --std=c++11 ./

    - name: Upload cppcheck report
      uses: actions/upload-artifact@v2
      with:
        name: cppcheck-report
        path: cppcheck.txt

  google-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache Google Test Build
      uses: actions/cache@v2
      with:
        path: /usr/lib/libgtest*
        key: gtest-${{ runner.os }}

    - name: Install gtest manually
      run: sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake CMakeLists.txt && sudo make && sudo cp lib/*.a /usr/lib && sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a && sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a
    - uses: actions/checkout@v1
    - name: configure
      run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release
    - name: make
      run: cd build && make

    - name: Cache Build Artifacts
      uses: actions/cache@v2
      with:
        path: path/to/your/build/artifacts
        key: build-${{ runner.os }}-${{ github.sha }}
        restore-keys: |
          build-${{ runner.os }}-

    - name: Build and Test
      run: |
        cd test
        make

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: test/log/results.log

